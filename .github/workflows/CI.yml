name: CI

on: 
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
  workflow_dispatch:

jobs:
  frontend-lint:
    name: Frontend lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest
      - name: Run Biome on frontend
        run: npx biome ci --config-path=.\ .

  backend-lint:
    name: Backend lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'
      - name: Install ruff
        run: pip install ruff
      - name: Run ruff on backend
        run: ruff ./backend

  test:
    name: Django run tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 2376:2376

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build the Docker Compose stack
      run: docker-compose -f docker-compose.yml build

    - name: Run tests
      env:
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        DJANGO_SECRET: ${{ secrets.DJANGO_SECRET }}
      run: |
        docker-compose -f docker-compose.yml up -d postgresql redis
        docker-compose -f docker-compose.yml run backend ./manage.py test
        docker-compose -f docker-compose.yml down

  frontend-audit:
    name: Frontend audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install NPM dependencies
        run: |
          cd frontend
          npm install
      
      - name: Run NPM Audit
        run: |
          cd frontend
          npm audit

  backend-audit:
    name: Backend audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'
      
      - name: Install pip-audit
        run: pip install pip-audit
      
      - name: Run pip-audit
        run: |
          cd backend
          pip-audit -r requirements.txt
  
  docker-compose-build-and-scan:
    name: Docker compose scan images for vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Compose Build
        run: docker-compose build

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Docker Images with Trivy
        run: |
          images=$(docker-compose config | grep 'image:' | awk '{print $2}' | sort | uniq)
          backend_base_image=$(grep '^FROM' backend/Dockerfile | awk '{print $2}' | sort | uniq)
          frontend_base_image=$(grep '^FROM' frontend/Dockerfile | awk '{print $2}' | sort | uniq)
          images="$images $backend_base_image $frontend_base_image"
          for image in $images; do
            echo "Scanning $image"
            trivy image $image || true
          done
      
      - name: Scan docker-compose and Dockerfiles for vulnerabilities with Trivy
        run: |
          trivy fs --security-checks vuln,config .
          trivy conf ./test
          ls

  licences-scan:
  name: Licences scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'
      
      - name: Install NPM dependencies
        run: |
          cd frontend
          npm install

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
      
      - name: Scan licences with Trivy
        run: |
          trivy fs --security-checks license .